{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = 0;\n  const end = page * TRANSACTIONS_PER_PAGE + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsPageSize = _ref2 => {\n  let {\n    pageSize\n  } = _ref2;\n\n  if (pageSize === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = 0;\n  const end = pageSize;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${pageSize}`);\n  }\n\n  return {\n    nextPage: 0,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref3 => {\n  let {\n    employeeId\n  } = _ref3;\n\n  if (!employeeId) {\n    getEmployees();\n    const page = 0; // Example page number\n\n    const paginatedTransactions = getTransactionsPaginated({\n      page\n    });\n    return data.transactions.slice(0, 5); // throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref4 => {\n  let {\n    transactionId,\n    value\n  } = _ref4;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsPageSize","pageSize","getTransactionsByEmployee","employeeId","paginatedTransactions","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["C:/Users/Sahana/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\nimport { start } from \"repl\";\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = 0\n  const end = page*TRANSACTIONS_PER_PAGE + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\n\nexport const getTransactionsPageSize = ({\n  pageSize}: {pageSize: number}): PaginatedResponse<Transaction[]> => {\n  if (pageSize === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = 0\n  const end = pageSize\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${pageSize}`)\n  }\n\n \n\n  return {\n    nextPage:0,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    getEmployees()\n    const page = 0; // Example page number\n    const paginatedTransactions = getTransactionsPaginated({ page });\n    return data.transactions.slice(0,5)\n    // throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAGA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAG,CAAd;EACA,MAAMC,GAAG,GAAGH,IAAI,GAACN,qBAAL,GAA6BA,qBAAzC;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAuBP,OAAO,MAAMI,uBAAuB,GAAG,SAC+B;EAAA,IAD9B;IACtCC;EADsC,CAC8B;;EACpE,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;IACrB,MAAM,IAAIP,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAG,CAAd;EACA,MAAMC,GAAG,GAAGK,QAAZ;;EAEA,IAAIN,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeO,QAAS,EAAnC,CAAN;EACD;;EAID,OAAO;IACLH,QAAQ,EAAC,CADJ;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CAnBM;AAqBP,OAAO,MAAMM,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACfZ,YAAY;IACZ,MAAME,IAAI,GAAG,CAAb,CAFe,CAEC;;IAChB,MAAMW,qBAAqB,GAAGZ,wBAAwB,CAAC;MAAEC;IAAF,CAAD,CAAtD;IACA,OAAOL,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwB,CAAxB,EAA0B,CAA1B,CAAP,CAJe,CAKf;EACD;;EAED,OAAOX,IAAI,CAACE,YAAL,CAAkBe,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BL,UAAtE,CAAP;AACD,CAVM;AAYP,OAAO,MAAMM,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIZ,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDY,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;AACD,CAVM"},"metadata":{},"sourceType":"module"}